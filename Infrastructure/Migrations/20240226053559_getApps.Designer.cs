// <auto-generated />
using System;
using Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ShophubContext))]
    [Migration("20240226053559_getApps")]
    partial class getApps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Domain.Entities.Coupon", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingLocationItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("BillingLocationItemId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.FeatureEndpointMap", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.ToTable("FeatureEndpointMaps");
                });

            modelBuilder.Entity("Domain.Entities.FeatureRoleMap", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FeatureId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.ToTable("FeatureRoleMaps");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("OrderItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Long")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CouponItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomerItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveredOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ShippingInfoId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("CouponItemId");

                    b.HasIndex("CustomerItemId");

                    b.HasIndex("ShippingInfoId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.PaymentInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("OrderItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PaidOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("PaymentInfos");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("BrandItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("PrimaryImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RemainingQuantity")
                        .HasColumnType("bigint");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("SecondaryImageUrls")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("BrandItemId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.ToTable("ProductCategorys");
                });

            modelBuilder.Entity("Domain.Entities.ShippingInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("BillingLocationItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("BillingLocationItemId")
                        .IsUnique();

                    b.ToTable("ShippingInfos");
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomerItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("IdsAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("IdsAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsMarkedToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string[]>("RolesAllowedToDelete")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToRead")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToUpdate")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("RolesAllowedToWrite")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ItemId");

                    b.HasIndex("CustomerItemId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FeatureEndpointMapFeatureRoleMap", b =>
                {
                    b.Property<string>("FeatureEndpointMapsItemId")
                        .HasColumnType("text");

                    b.Property<string>("FeatureRoleMapsItemId")
                        .HasColumnType("text");

                    b.HasKey("FeatureEndpointMapsItemId", "FeatureRoleMapsItemId");

                    b.HasIndex("FeatureRoleMapsItemId");

                    b.ToTable("FeatureEndpointMapFeatureRoleMap");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<string>("CustomerOrdersItemId")
                        .HasColumnType("text");

                    b.Property<string>("ProductItemId")
                        .HasColumnType("text");

                    b.HasKey("CustomerOrdersItemId", "ProductItemId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.Property<string>("CategoriesItemId")
                        .HasColumnType("text");

                    b.Property<string>("ProductsItemId")
                        .HasColumnType("text");

                    b.HasKey("CategoriesItemId", "ProductsItemId");

                    b.HasIndex("ProductsItemId");

                    b.ToTable("ProductProductCategory");
                });

            modelBuilder.Entity("ProductShoppingCart", b =>
                {
                    b.Property<string>("ProductsItemId")
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartsItemId")
                        .HasColumnType("text");

                    b.HasKey("ProductsItemId", "ShoppingCartsItemId");

                    b.HasIndex("ShoppingCartsItemId");

                    b.ToTable("ProductShoppingCart");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entities.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Location", "BillingLocation")
                        .WithMany("BillingCustomers")
                        .HasForeignKey("BillingLocationItemId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BillingLocation");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("Domain.Entities.Invoice", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponItemId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ShippingInfo", "ShippingInfo")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("ShippingInfoId");

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("Domain.Entities.PaymentInfo", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("Domain.Entities.PaymentInfo", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandItemId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.ShippingInfo", b =>
                {
                    b.HasOne("Domain.Entities.Location", "BillingLocation")
                        .WithOne("ShippingInfo")
                        .HasForeignKey("Domain.Entities.ShippingInfo", "BillingLocationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingLocation");
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Domain.Entities.ShoppingCart", "CustomerItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FeatureEndpointMapFeatureRoleMap", b =>
                {
                    b.HasOne("Domain.Entities.FeatureEndpointMap", null)
                        .WithMany()
                        .HasForeignKey("FeatureEndpointMapsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FeatureRoleMap", null)
                        .WithMany()
                        .HasForeignKey("FeatureRoleMapsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrdersItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.HasOne("Domain.Entities.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductShoppingCart", b =>
                {
                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ShoppingCart", null)
                        .WithMany()
                        .HasForeignKey("ShoppingCartsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Navigation("BillingCustomers");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("PaymentInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ShippingInfo", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
